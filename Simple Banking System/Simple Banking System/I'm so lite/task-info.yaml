type: edu
files:
- name: banking/banking.py
  visible: true
  text: "# Write your code here\nimport random\n\nclass Card:  # create card blueprint\n\
    \    # card_list = []\n    def __init__(self):\n        self.number = int('400000'\
    \ + str(random.randrange(100000000, 1000000000)))\n        checking_list = list(str(self.number))\n\
    \        digit_sum = 0\n        for i in range(len(checking_list)):\n        \
    \    checking_list[i] = int(checking_list[i])\n            if i % 2 == 0:\n  \
    \              checking_list[i] *= 2\n                if checking_list[i] > 9:\n\
    \                    checking_list[i] -= 9\n            digit_sum += checking_list[i]\n\
    \        # self.number = self.number * 10 + (10 - digit_sum % 10)\n        digit_sum\
    \ = 10 - (digit_sum % 10)\n        self.number = int(str(self.number) + str(digit_sum))\n\
    \        \n        self.pin = int(str(random.randrange(1000, 10000)))\n      \
    \  self.balance = 0\n        \n    def check_balance(self):\n        print(\"\
    Balance: {}\".format(self.balance))\n\ncard_objects = []  # list to hold Card\
    \ objects\ncard_pos = 0\nlog_out_exit = False\n\nwhile(True):\n    if log_out_exit:\
    \  # if chosen to exit from account\n        break\n    print(\"1. Create an account\"\
    )  # display options\n    print(\"2. Log into account\")\n    print(\"0. Exit\"\
    )\n    entered_value = int(input())  # check input\n    if entered_value == 1:\n\
    \        card_objects.append(Card())  # add new object to list\n        \n   \
    \     # check if number unique\n        equal = True\n        while(equal):\n\
    \            if len(card_objects) > 1:\n                for i in range(len(card_objects)\
    \ - 1):\n                    if card_objects[-1].number == card_objects[i].number:\n\
    \                        card_objects[-1].number = int('400000' + str(random.randrange(1000000000,\
    \ 10000000000)))\n                        checking_list = list(str(card_objects[-1].number))\n\
    \                        digit_sum = 0\n                        for i in range(len(checking_list)):\n\
    \                            checking_list[i] = int(checking_list[i])\n      \
    \                      if i % 2 == 0:\n                                checking_list[i]\
    \ *= 2\n                                if checking_list[i] > 9:\n           \
    \                         checking_list[i] -= 9\n                            digit_sum\
    \ += checking_list[i]\n                        card_objects[-1].number = card_objects[-1].number\
    \ * 10 + (10 - digit_sum % 10)\n                        break\n              \
    \      else:\n                        equal = False\n            else:\n     \
    \           break\n                        \n        print(\"Your card has been\
    \ created\")\n        print(\"Your card number:\")\n        print(card_objects[-1].number)\
    \  # append() adds item to the end of the list\n        print(\"Your card PIN:\"\
    )\n        print(card_objects[-1].pin)\n    elif entered_value == 2:\n       \
    \ print(\"Enter your card number\")  # take login credentials\n        entered_card_num\
    \ = int(input())        \n        card_pos = 'invalid'\n        for i in range(len(card_objects)):\n\
    \            if entered_card_num == card_objects[i].number:                \n\
    \                card_pos = i\n                break\n        if card_pos == 'invalid':\n\
    \            print(\"Wrong card number or PIN!\")\n            continue\n    \
    \    print(\"Enter your PIN:\")  # take login credentials\n        entered_card_pin\
    \ = int(input())\n        if card_objects[card_pos].pin == entered_card_pin:\n\
    \            print(\"You have successfully logged in!\")\n            while(True):\
    \  # take to new UI\n                print(\"1. Balance\")  # display options\n\
    \                print(\"2. Log out\")\n                print(\"0. Exit\")\n \
    \               entered_second = int(input())  # check input\n               \
    \ if entered_second == 1:\n                    card_objects[card_pos].check_balance()\n\
    \                elif entered_second == 2:  # log out of account\n           \
    \         break\n                elif entered_second == 0:  # unclear instructions\n\
    \                    log_out_exit = True\n                    break\n        \
    \        else:\n                    print(\"Wrong choice\")\n        else:\n \
    \           print(\"Wrong card number or PIN!\")\n    elif entered_value == 0:\n\
    \        print(\"Bye!\")\n        break\n    else:\n        print(\"Wrong choice\"\
    )\n                \n    "
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswerException
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from shutil import copy2
    import os
    import sqlite3
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False
    db_file_name = 'card.s3db'
    temp_db_file_name = 'temp.s3db'


    def get_credentials(output: str):
        number = re.findall(r'400000\d{10}', output, re.MULTILINE)
        if not number:
            raise WrongAnswerException('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswerException('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    def check_db(output: str, value_to_return):
        if not os.path.exists(db_file_name):
            return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))
        try:
            copy2(db_file_name, temp_db_file_name)
        except Exception:
            return CheckResult.wrong('Can\'t copy database file!')

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute(
                    'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')
                for _ in response.fetchall():
                    if 'card' in _:
                        break
                else:
                    return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')
        except Exception as exp:
            return CheckResult.wrong('Can\'t connect to the database!')

        correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute('PRAGMA table_info(card);')
                real_columns = response.fetchall()
                for correct_column in correct_columns:
                    for real_column in real_columns:
                        real_column = [str(element).upper() for element in real_column]
                        if correct_column[0] in real_column and correct_column[1] in real_column:
                            break
                    else:
                        return CheckResult.wrong(
                            f'Can\'t find column named \'{correct_column[0].lower()}\' with \'{correct_column[1]}\' type.\n'
                            'Your table should have columns described in the stage instructions.')
        except Exception as ignored:
            return CheckResult.wrong('Can\'t connect to the database!')

        return CheckResult.correct()


    def check_db_rows(output, attach):
        correct_num_of_cards = 10
        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card').fetchall()
            for number in numbers:
                if len(number) != 16:
                    return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
                for row in rows:
                    if number in row:
                        break
                else:
                    return CheckResult.wrong('Your database doesn’t save newly created cards.\n'
                                             'Make sure you commit your DB changes right after saving a new card in the database!')
        return CheckResult.correct()


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='0',
                    check_function=check_db,
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 8),
                    ]),
                TestCase(
                    stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',
                    check_function=check_db_rows
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')

        def after_all_tests(self):
            if os.path.exists('temp.s3db'):
                copy2('temp.s3db', 'card.s3db')
                os.remove('temp.s3db')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: card.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/109/stages/593/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/109/stages/593/implement">JetBrains
    Academy</a>
  time: Fri, 04 Sep 2020 01:12:47 UTC
record: 3
